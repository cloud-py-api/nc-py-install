name: Build and publish

on:
  workflow_dispatch:

env:
  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

jobs:

  wheels_any:
    name: Build pure python wheels
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Build pure wheel
        run: |
          python3 -m pip install twine wheel
          python3 -m pip wheel -w wheelhouse/ .

      - name: Check wheel
        run: twine check wheelhouse/nc_py_install-*

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/nc_py_install-*.whl
          if-no-files-found: error

  sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install requirements
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user check-manifest twine

      - name: Run check-manifest
        run: python3 -m check_manifest

      - name: Build sdist
        run: python3 -m build --sdist --outdir wheelhouse

      - name: Install and check sdist
        run: |
          python3 -m pip install --user wheelhouse/*.tar.gz
          python3 -m twine check wheelhouse/*

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  create_release:
    needs: [sdist, wheels_any]
    runs-on: ubuntu-20.04
    name: Create GitHub release

    steps:
      - uses: actions/checkout@v3
      - name: Get release info
        id: get_release_info
        run: |
          RELEASE_VERSION=$(sed -n "s/^__version__.*\"\(.*\)\"$/\\1/p" ./nc_py_install/_version.py)
          echo "::set-output name=version::v${RELEASE_VERSION}"
          echo "::set-output name=tag::v${RELEASE_VERSION}"
          CHANGELOG=$(grep -oPz "(?s)##\s\[$RELEASE_VERSION.+?(?=##\s\[|$)" ./CHANGELOG.md | tr -d '\0' | sed /^$/d | sed '1d')
          CHANGELOG=$(echo "$CHANGELOG" | sed '$!N;s/^###.*\n#/#/;P;D' | sed '$!N;s/^###.*\n#/#/;P;D' | sed '${/^###/d;}')
          if [ "$CHANGELOG" == "" ]; then
            echo "changelog is empty!"
            exit 1
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Collect sdist and wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse

      - name: Create release draft
        uses: ncipollo/release-action@v1.10.0
        with:
          name: ${{ steps.get_release_info.outputs.version }}
          tag: ${{ steps.get_release_info.outputs.tag }}
          commit: ${{ github.ref }}
          draft: false
          body: ${{ env.CHANGELOG }}
          artifacts: wheelhouse/*
          artifactErrorsFailBuild: true

  publish:
    name: Publish to Pypi
    needs: [create_release]
    runs-on: ubuntu-latest

    steps:
    - name: Collect sdist and wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - name: Publish wheels to PyPI
      run: |
          python3 -m pip install twine
          ls -la wheelhouse/
          twine upload --skip-existing wheelhouse/*.whl
          twine upload wheelhouse/*tar.gz
